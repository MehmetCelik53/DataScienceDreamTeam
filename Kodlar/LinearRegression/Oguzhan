import numpy as np
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Streamlit başlığı
st.title("Lineer Regresyon Uygulaması")
st.write("Linear Regresyon bağımlı ve bağımsız değişken olmak üzere iki değişken arasındaki ilişkiyi açıklayan bir doğrusal denklem modelidir.")

st.latex(r'Y = b + mX')
st.write("""
- (Y): Bağımlı değişken 
- (X): Bağımsız değişken
- (b): Y ekseni kesişim noktası
- (m): Eğim
""")
st.title("Matris Notasyonu")
st.write("Matris notasyonu, büyük miktarda sayıyı veya değişkeni içeren verileri tablo şeklinde düzenleyerek, karmaşık işlemleri daha kolay anlaşılabilir hale getirir.")
st.latex(r'Y=Xβ')
st.write("- (β): regresyon katsayılarını (b ve m) içeren vektördür.")



st.latex(r"""
X = \begin{bmatrix}
1 & x_1 \\
1 & x_2 \\
\vdots & \vdots \\
1 & x_n
\end{bmatrix}
         Y= \begin{bmatrix}
y_1 \\
y_2 \\
\vdots \\
y_3
\end{bmatrix}
\beta = \begin{bmatrix}
b \\
m \\
\end{bmatrix}
""")

st.title("Normal Denklemler")
st.write("Regresyon katsayılarını bulmak için 'normal denklemler' adı verilen yöntem kullanılır. Bu yöntem, en küçük kareler (least squares) prensibini kullanarak katsayıları şu şekilde hesaplar:")

st.latex(r"""\beta = (X^TX)^{-1}X^TY""")
st.write("En küçük kareler yöntemi, bir veri setine en iyi uyumu sağlayan fonksiyonu bulmak için kullanılır. Amacı, gözlemlenen değerler ile tahmin edilen değerler arasındaki farkların karelerinin toplamını en aza indirmektir.")

x_values = st.text_input("X Values:", "1, 2, 3, 4, 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40")
y_values = st.text_input("Y Values:", "12.8, 13, 12.3, 12.6, 12.8,12.3,12.8,12.7,12.5,12.8,12.8, 13, 12.8, 12.9, 12.8,12.5,12.9,12.7,12.5,12.8,13, 13, 13.1, 13.1, 12.8,13.5,13.2,13.8,14,13.6,14, 14.8, 14.5, 14.6, 15,15.4,14.2,14.7,15.5,14.8")
if st.button("Calculate"):
    x = np.array([float(i) for i in x_values.split(",")])
    y = np.array([float(i) for i in y_values.split(",")])
    X = np.vstack((np.ones(len(x)), x)).T
    Y = y.reshape(-1, 1)
    
    XtX = np.dot(X.T, X)
    XtY = np.dot(X.T, Y)
    beta = np.linalg.inv(XtX).dot(XtY)
    
    b, m = beta.flatten()
    
    st.write(f"Steps for Normal Equation Method:")
    df1 = pd.DataFrame(X, columns=['1'] + [f'x_{i+1}' for i in range(X.shape[1]-1)])
    df2 = pd.DataFrame(Y, columns=['1'] + [f'x_{i+1}' for i in range(Y.shape[1]-1)])
    df3 = pd.DataFrame(XtX,columns=["1"]+[f"x={i+1}" for i in range(XtX.shape[1]-1)])
    df4 = pd.DataFrame(XtY,columns=["1"]+[f"x={i+1}" for i in range(XtY.shape[1]-1)])
    df5 = pd.DataFrame(np.linalg.inv(XtX),columns=["1"]+[f"x={i+1}" for i in range(np.linalg.inv(XtX).shape[1]-1)])
    df6 = pd.DataFrame(beta,columns=["1"]+[f"x={i+1}" for i in range(beta.shape[1]-1)])

    matris1 = r""" X = \begin{bmatrix}"""
    for i in range(X.shape[0]):
        matris1 += " & ".join([str(x) for x in df1.iloc[i]]) + r"\\"
    matris1 += r"""
    \end{bmatrix}
    """
    matris2 = r'''Y = \begin{bmatrix}'''
    for row in range(Y.shape[0]):
        matris2 += ' & '.join([str(x) for x in df2.iloc[i]]) + r"\\"
    
    matris2 += r'''
    \end{bmatrix}
'''
    matris3 = r"""X^T * X: \begin{bmatrix}"""
    for i in range(XtX.shape[0]):
        matris3 += " & ".join([str(x) for x in df3.iloc[i]]) + r"\\"
    matris3 += r"""\end{bmatrix}"""
    matris4 = r"""X^T * Y: \begin{bmatrix}"""
    for i in range(XtY.shape[0]):
        matris4 += " & ".join([str(x) for x in df4.iloc[i]]) + r"\\"
    matris4 += r"""\end{bmatrix}"""
    matris5 = r"""X^T * Y: \begin{bmatrix}"""
    for i in range(np.linalg.inv(XtX).shape[0]):
        matris5 += " & ".join([str(x) for x in df5.iloc[i]]) + r"\\"
    matris5 += r"""\end{bmatrix}"""
    matris6 = r"""\beta: \begin{bmatrix}"""
    for i in range(beta.shape[0]):
        matris6 += " & ".join([str(x) for x in df6.iloc[i]]) + r"\\"
    matris6 += r"""\end{bmatrix}"""
    st.latex(matris1 + matris2)
    st.latex(matris3)
    st.latex(matris4)
    st.latex(matris5)
    st.latex(matris6)
    st.latex(f"Eğim (m): {m}")
    st.latex(f"Y Kesişim (b): {b}")
    plt.scatter(x, y, color="blue", label="Data")
    plt.plot(x, m*x + b, color="red", label="Regression")
    plt.xlabel("Yaş")
    plt.ylabel("Kan Basıncı")
    plt.legend()
    st.pyplot(plt)
